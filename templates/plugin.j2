#!/usr/bin/python3
from os import environ
from json import dumps
import random
from subprocess import check_output
from ipaddress import ip_network
from itertools import islice

CNI_COMMAND = environ['CNI_COMMAND']
CNI_NETNS = environ['CNI_NETNS'].split('/')[-1]
CNI_IFNAME = environ["CNI_IFNAME"]
CNI_BR_NAME = "{{ BRIDGE_NAME }}"

if CNI_COMMAND == "VERSION":
    print(dumps({
        "cniVersion": "{{ CNI_VERSION }}",
        "supportedVersions": ["{{ CNI_VERSION }}"]
    }))

if CNI_COMMAND == "ADD":
    random_name = str(random.randint(0, 100000))
    random_ip = str(next(islice(ip_network("{{ bridge_subnet }}").hosts(), random.randint(0, 255), None))) + "/24"

    check_output(['bash', '-c', f'ip link add {CNI_IFNAME} type veth peer name cni-veth-{random_name}'])
    check_output(['bash', '-c', f'ip link set {CNI_IFNAME} netns {CNI_NETNS}'])
    check_output(['bash', '-c', f'ip link set cni-veth-{random_name} master {CNI_BR_NAME}'])
    check_output(['bash', '-c', f'ip -n {CNI_NETNS} addr add {random_ip} dev {CNI_IFNAME}'])
    check_output(['bash', '-c', f'ip -n {CNI_NETNS} link set {CNI_IFNAME} up'])
    check_output(['bash', '-c', f'ip link set cni-veth-{random_name} up'])
    check_output(
        ['bash', '-c',
         f'ip netns exec {CNI_NETNS} ip route add default via {{ bridge_subnet.split("/")[0] }} dev {CNI_IFNAME} '])

    print(dumps({
        "cniVersion": "{{ CNI_VERSION }}",
        "interfaces": [
            {
                "name": CNI_IFNAME,
                "sandbox": CNI_NETNS
            }
        ],
        "ips": [
            {
                "version": "4",
                "address": random_ip,
                "gateway": '{{ bridge_subnet.split("/")[0] }}',
                "interface": 0
            }
        ]
    }))
    if CNI_COMMAND == "GET":
        print("GET is not supported!")

    if CNI_COMMAND == "DEL":
        print("DEL is not supported!")
